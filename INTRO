1)Write a function that returns the sum of two numbers.
def solution(param1, param2):
    return param1 + param2

2)Given a year, return the century it is in. The first century spans from the year 1 up to and including the year 100, the second - from the year 101 up to and including the year 200, etc.
def solution(year):
    return (year - 1) // 100 + 1

3)Given the string, check if it is a palindrome.
def solution(inputString):
    left = 0
    right = len(inputString) - 1
    
    while left < right:
        if inputString[left] != inputString[right]:
            return False
        left += 1
        right -= 1
    
    return True

4)Given an array of integers, find the pair of adjacent elements that has the largest product and return that product.
def solution(inputArray):
    max = float('-inf')
    
    for i in range(len(inputArray) - 1):
        current = inputArray[i] * inputArray[i + 1]
        
        if current > max:
            max = current
    
    return max

5)ShapeArea
def solution(inputArray):
    max = float('-inf')
    
    for i in range(len(inputArray) - 1):
        current = inputArray[i] * inputArray[i + 1]
        
        if current > max:
            max = current
    
    return max

6)MakeArrayConsecutive2
def solution(inputArray):
    max = float('-inf')
    
    for i in range(len(inputArray) - 1):
        current = inputArray[i] * inputArray[i + 1]
        
        if current > max:
            max = current
    
    return max

7)AlmostIncreasingSequence
def solution(inputArray):
    max = float('-inf')
    
    for i in range(len(inputArray) - 1):
        current = inputArray[i] * inputArray[i + 1]
        
        if current > max:
            max = current
    
    return max

8)MatrixElementsSum
def solution(inputArray):
    max = float('-inf')
    
    for i in range(len(inputArray) - 1):
        current = inputArray[i] * inputArray[i + 1]
        
        if current > max:
            max = current
    
    return max

9)allLongestStrings
def solution(inputArray):
    max_value=max([len(i) for i in inputArray])
    return list(filter(lambda x: len(x) == max_value,inputArray))

10)commonCharacterCount
def solution(s1, s2):
    res = 0
    for p1 in s1:
        if p1 in s2:
            s2=s2.replace(p1,'',1)
            res+=1
    return res

11)isLucky
def solution(n):
    numbers = list(map(int,list(str(n))))
    length=len(str(n))
    s1= sum(numbers[0:(length//2)])
    s2=sum(numbers[length//2:length])
    return s1==s2

12)sortByheight
def solution(a):
    heights = [height for height in a if height != -1]
    heights.sort()
    index = 0

    for i in range(len(a)):
        if a[i] != -1:
            a[i] = heights[index]
            index += 1
    return a
    
13)reverseInParenthesis
def solution(inputString):
    stack = []
    chars = list(inputString)
    for i, char in enumerate(chars):
        if char == '(':
            stack.append(i)
        elif char == ')':
            start = stack.pop()
            chars[start+1:i] = reversed(chars[start+1:i])
    return ''.join(char for char in chars if char not in '()')

14)AlternatingSum
def solution(a):
    alt_sum = [0, 0]
    length = len(a)
    for i in range(0, length):
        if i % 2 == 0:
            alt_sum[0] += a[i]
        else:
            alt_sum[1] += a[i]
    return alt_sum

15)AddBorder
def solution(a):
    alt_sum = [0, 0]
    length = len(a)
    for i in range(0, length):
        if i % 2 == 0:
            alt_sum[0] += a[i]
        else:
            alt_sum[1] += a[i]
    return alt_sum

16)AreSimilar
def solution(a, b):
    check_a = []
    check_b = []
    count = 0
    for i in range(len(a)):
        if a[i] != b[i]:
            count += 1
            check_a.append(a[i])
            check_b.append(b[i])
    if count == 0:
        return True
    elif count == 2:
        return set(check_a) == set(check_b)
    else:
        return False

17)ArrayChange
def solution(a, b):
    check_a = []
    check_b = []
    count = 0
    for i in range(len(a)):
        if a[i] != b[i]:
            count += 1
            check_a.append(a[i])
            check_b.append(b[i])
    if count == 0:
        return True
    elif count == 2:
        return set(check_a) == set(check_b)
    else:
        return False

18)PalindroneRearranging
